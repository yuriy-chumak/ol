#!/usr/bin/env ol
(display "/* ")
,load "definitions"
(print " */\n")

(print "#include <stdio.h>")

(define-syntax ~~
   (syntax-rules ()
      ((~~ '~~ name (quote function) . args)
         (cons (symbol->string name) (function . args)))
      ((~~ f . args)
         (~~ '~~ f f . args))
      ))

(define MAX-ARGS-COUNT 24)

,load "numbers-paramless.scm.gen"
,load "same-type-args.gen"
,load "numbers-mixed-type-args.scm.gen"

;; --------------------------------------------------
,quit

;; ---------------------------------------------
;; TODO: v_c(arg1), v_cc(arg1, arg2), v_ccc(arg1, arg2, arg3), ...

;; ---------------------------------------------
,load "mixed-type-num-args.scm.gen"


;; ---------------------------------------------
   
,quit
;; ; index i: 1 .. N
;; (for-each (lambda (index typename format)
;;       (for-each (lambda (n) (print
;;             (fold (lambda (testcase pair)
;;                      (str-replace testcase (car pair) (cdr pair)))
;;                (s/'/"/g testcase)
;;                (list
;;                   (~~ '|v_cc..c(n)| index n) ; function name
;;                   (~~ '|type a1, type a2, .., type aN| typename n) ; function args
;;                   (~~ '|a1 + a2 + .. + aN| n)
;;                   (~~ '|%d %d .. %d(n)| format n)
;;                   (~~ '|a1, a2, .., aN| n)
;;                   (cons "type" typename)
;;                   (cons "format" format)
;;                )) ))

;;          (iota (if (m/L|l/ index) (/ MAX-ARGS-COUNT 2) MAX-ARGS-COUNT) 1)))
;;    ; unsigned types                                 ; signed types                               ; floating points
;;    '("C"             "S"              "I"             "L"                  "c"            "s"            "i"           "l"         "f"     "d"     )
;;    '("unsigned char" "unsigned short" "unsigned int"  "unsigned long long" "signed char"  "signed short" "signed int"  "long long" "float" "double")
;;    '("%u"            "%u"             "%u"            "%llu"               "%d"           "%d"           "%d"          "%lld"      "%f"    "%f"    ))

#|
type c_cnp(int n, type* p) {
   printf("{{");
   for (int i = 0; i < n; i++)
      printf(" " format, p[i]);
   printf(" }}");
   returm *p;
}}
|#

;; ---------------------------------------------
(print "
// simple type*(n) functions")

(define testcase "
void v_cnp(int n, type* p)
{
   printf('{{');
   for (int i = 0; i < n; i++)
      printf(' format', p[i]);
   printf(' }}'); fflush(stdout);
   return;
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format)
      (print
      (fold (lambda (testcase pair)
               (str-replace testcase (car pair) (cdr pair)))
         (s/'/"/g testcase)
         (list
            (cons "v_cnp" (string-append "v_" index "np"))
            (cons "type" typename)
            (cons "format" format)
         )) ))

   ; unsigned types                                 ; signed types                               ; floating points
   '("C"             "S"              "I"             "L"                  "c"            "s"            "i"           "l"         "f"     "d"     )
   '("unsigned char" "unsigned short" "unsigned int"  "unsigned long long" "signed char"  "signed short" "signed int"  "long long" "float" "double")
   '("%u"            "%u"             "%u"            "%llu"               "%d"           "%d"           "%d"          "%lld"      "%f"    "%f"    ))
