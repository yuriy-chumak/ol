#!/usr/bin/env ol
(display "/* ")
,load "definitions"
(print " */\n")

(print "#include <stdio.h>")

(define-syntax ~~
   (syntax-rules ()
      ((~~ '~~ name (quote function) . args)
         (cons (symbol->string name) (function . args)))
      ((~~ f . args)
         (~~ '~~ f f . args))
      ))

(define MAX-ARGS-COUNT 24)

;; --------------------------------------------------
(print "
// function returning numeric type by value (neutral values, type limits)
// (such calls are optimized for fast execution)")

(define testcase "
type cN_()
{
   type y = valueSUFFIX;
   printf('{{ () => format }}', y); fflush(stdout);
   return y;
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format numbers)
      (for-each (lambda (n) (print
            (fold (lambda (testcase pair)
                     (str-replace testcase (car pair) (cdr pair)))
               (s/'/"/g testcase)
               (list
                  (cons "cN_" (string-append index (s/-/m/ (number->string n)) "_"))
                  (cons "type" typename)
                  (cons "format" format)
                  (cons "value" (number->string n))
                  (cons "SUFFIX" (cond
                                    ((= index "l") "LL")
                                    ((= index "L") "ULL")
                                    ((= index "f") ".0f")
                                    ((= index "d") ".0")
                                    (else "")))
               )) ))

         numbers))
   '("C"              "S"               "I"               "L"                  "c"                          "s"                            "i"                            "l"                             "f"                 "d"     )
   '("unsigned char"  "unsigned short"  "unsigned int"    "unsigned long long" "signed char"                "signed short"                 "signed int"                   "signed long long"              "float"             "double")
   '("%u"             "%u"              "%u"              "%llu"               "%d"                         "%d"                           "%d"                           "%lld"                          "%f"                "%f"    )
   `((0 1 ,UINT8_MAX) (0 1 ,UINT16_MAX) (0 1 ,UINT32_MAX) (0 1 ,UINT64_MAX)    (,INT8_MIN -1 0 1 ,INT8_MAX) (,INT16_MIN -1 0 1 ,INT16_MAX) (,INT32_MIN -1 0 1 ,INT32_MAX) (,INT64_MIN -1 0 1 ,INT64_MAX)  (-1e10 -1 0 1 1e10) (-1e48 -1 0 1 1e48))
)



;; ---------------------------------------------
(print "
// simple type(n) functions")

(define testcase "
void v_cc..c(n)(type a1, type a2, .., type an)
{
   printf('{{ %u %u .. %u(n) }}', a1, a2, .., an); fflush(stdout);
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format)
      (for-each (lambda (n) (print
            (fold (lambda (testcase pair)
                     (str-replace testcase (car pair) (cdr pair)))
               (s/'/"/g testcase)
               (list
                  (~~ '|v_cc..c(n)| index n) ; function name
                  (~~ '|type a1, type a2, .., type an| typename n) ; function args
                  (~~ '|a1 + a2 + .. + an| n)
                  (~~ '|%u %u .. %u(n)| format n)
                  (~~ '|a1, a2, .., an| n)
                  (cons "type" typename)
                  (cons "format" format)
               )) ))

         (iota (if (m/L|l/ index) (/ MAX-ARGS-COUNT 2) MAX-ARGS-COUNT) 1)))
   ; unsigned types                                 ; signed types                               ; floating points
   '("C"             "S"              "I"             "L"                  "c"            "s"            "i"           "l"         "f"     "d"     )
   '("unsigned char" "unsigned short" "unsigned int"  "unsigned long long" "signed char"  "signed short" "signed int"  "long long" "float" "double")
   '("%u"            "%u"             "%u"            "%llu"               "%d"           "%d"           "%d"          "%lld"      "%f"    "%f"    ))

;; ---------------------------------------------
; all types together
(print (s/'/"/g "
// all types together
void v_CSILcsilfd(unsigned char a1, unsigned short a2, unsigned int a3, unsigned long long a4, signed char a5, signed short a6, signed int a7, long long a8, float a9, double a10)
{
   printf('{{ %u %u %u %llu %d %d %d %lld %f %f }}', a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); fflush(stdout);
}"))

;; ---------------------------------------------
(print "
// mixed type1(n-1), type2 functions")

(define testcase "
void v_cc..d[i]..c(N)(typeA a1, typeA a2, .., typeB b, .., type aN)
{
   printf('{{ %u %u .. %u .. %u(N) }}', a1, a2, .., b , .., aN); fflush(stdout);
}")
(print "/*" testcase "*/")

;; ; index i: 1 .. N
;; (for-each (lambda (index typename format)
;;       (for-each (lambda (n) (print
;;             (fold (lambda (testcase pair)
;;                      (str-replace testcase (car pair) (cdr pair)))
;;                (s/'/"/g testcase)
;;                (list
;;                   (~~ '|v_cc..c(n)| index n) ; function name
;;                   (~~ '|type a1, type a2, .., type aN| typename n) ; function args
;;                   (~~ '|a1 + a2 + .. + aN| n)
;;                   (~~ '|%u %u .. %u(n)| format n)
;;                   (~~ '|a1, a2, .., aN| n)
;;                   (cons "type" typename)
;;                   (cons "format" format)
;;                )) ))

;;          (iota (if (m/L|l/ index) (/ MAX-ARGS-COUNT 2) MAX-ARGS-COUNT) 1)))
;;    ; unsigned types                                 ; signed types                               ; floating points
;;    '("C"             "S"              "I"             "L"                  "c"            "s"            "i"           "l"         "f"     "d"     )
;;    '("unsigned char" "unsigned short" "unsigned int"  "unsigned long long" "signed char"  "signed short" "signed int"  "long long" "float" "double")
;;    '("%u"            "%u"             "%u"            "%llu"               "%d"           "%d"           "%d"          "%lld"      "%f"    "%f"    ))
