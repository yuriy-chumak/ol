(print "
// function returning numeric type by value (neutral values, type limits)
// (such calls are optimized for fast execution)")

(define testcase "
PUBLIC
type cN_()
{
   type y = valueSUFFIX;
   printf('{{ () => format }}', y); fflush(stdout);
   return y;
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format numbers)
      (for-each (lambda (n) (print
            (fold (lambda (testcase pair)
                     (str-replace testcase (car pair) (cdr pair)))
               (s/'/"/g testcase)
               (list
                  (cons "cN_" (string-append index (s/-/m/ (number->string n)) "_"))
                  (cons "type" typename)
                  (cons "format" format)
                  (cons "value" (number->string n))
                  (cons "SUFFIX" (cond
                                    ((= index "q") "LL")
                                    ((= index "Q") "ULL")
                                    ((= index "f") ".0f")
                                    ((= index "d") ".0")
                                    (else "")))
               )) ))

         numbers))
   '("C"              "S"               "I"               "Q"                  "c"                          "s"                            "i"                            "q"                             "f"                 "d"     )
   '("unsigned char"  "unsigned short"  "unsigned int"    "unsigned long long" "signed char"                "signed short"                 "signed int"                   "signed long long"              "float"             "double")
   '("%u"             "%u"              "%u"              "%llu"               "%d"                         "%d"                           "%d"                           "%lld"                          "%f"                "%f"    )
   `((0 1 ,UINT8_MAX) (0 1 ,UINT16_MAX) (0 1 ,UINT32_MAX) (0 1 ,UINT64_MAX)    (,INT8_MIN -1 0 1 ,INT8_MAX) (,INT16_MIN -1 0 1 ,INT16_MAX) (,INT32_MIN -1 0 1 ,INT32_MAX) (,INT64_MIN -1 0 1 ,INT64_MAX)  (-1e10 -1 0 1 1e10) (-1e48 -1 0 1 1e48))
)
