#!/usr/bin/env ol
,load "ffi.patterns"

(define-syntax ~~
   (syntax-rules ()
      ((~~ '~~ name (quote function) . args)
         (cons (symbol->string name) (function . args)))
      ((~~ f . args)
         (~~ '~~ f f . args))
      ))

(define ARGN 24)

;; --------------------------------------------------
(print "// function returning numeric types by value (neutral values, type limits)")
(define testcase "
type cN_()
{
   type y = valueSUFFIX;
   printf('{{ () => format }}', y); fflush(stdout);
   return y;
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format numbers)
      (for-each (lambda (n) (print
            (fold (lambda (testcase pair)
                     (str-replace testcase (car pair) (cdr pair)))
               (s/'/"/g testcase)
               (list
                  (cons "cN_" (string-append index (s/-/m/ (number->string n)) "_"))
                  (cons "type" typename)
                  (cons "format" format)
                  (cons "value" (number->string n))
                  (cons "SUFFIX" (cond
                                    ((= index "l") "LL")
                                    ((= index "L") "ULL")
                                    ((= index "f") ".0f")
                                    ((= index "d") ".0")
                                    (else "")))
               )) ))

         numbers))
   '("C"              "S"               "I"               "L"                  "c"                          "s"                            "i"                            "l"                             "f"                 "d"     )
   '("unsigned char"  "unsigned short"  "unsigned int"    "unsigned long long" "signed char"                "signed short"                 "signed int"                   "signed long long"              "float"             "double")
   '("%u"             "%u"              "%u"              "%llu"               "%d"                         "%d"                           "%d"                           "%lld"                          "%f"                "%f"    )
   `((0 1 ,UINT8_MAX) (0 1 ,UINT16_MAX) (0 1 ,UINT32_MAX) (0 1 ,UINT64_MAX)    (,INT8_MIN -1 0 1 ,INT8_MAX) (,INT16_MIN -1 0 1 ,INT16_MAX) (,INT32_MIN -1 0 1 ,INT32_MAX) (,INT64_MIN -1 0 1 ,INT64_MAX)  (-1e10 -1 0 1 1e10) (-1e48 -1 0 1 1e48))
)



;; ---------------------------------------------
(print "// simple type(n)->type functions")
(define testcase "
type c_cc..c(n)(type a1, type a2, .., type aN)
{
   type y = a1 + a2 + .. + aN;
   printf('{{ %u %u .. %u(n) => format }}', a1, a2, .., aN, y); fflush(stdout);
   return y;
}")
(print "/*" testcase "*/")

(for-each (lambda (index typename format)
      (for-each (lambda (n) (print
            (fold (lambda (testcase pair)
                     (str-replace testcase (car pair) (cdr pair)))
               (s/'/"/g testcase)
               (list
                  (~~ '|c_cc..c(n)| index n) ; function name
                  (~~ '|type a1, type a2, .., type aN| typename n) ; function args
                  (~~ '|a1 + a2 + .. + aN| n)
                  (~~ '|%u %u .. %u(n)| format n)
                  (~~ '|a1, a2, .., aN| n)
                  (cons "type" typename)
                  (cons "format" format)
               )) ))

         (iota ARGN 1)))
   ; unsigned types                                 ; signed types                               ; floating points
   '("C"             "S"              "I"             "c"            "s"            "i"           "f"     "d"     )
   '("unsigned char" "unsigned short" "unsigned int"  "signed char"  "signed short" "signed int"  "float" "double")
   '("%u"            "%u"             "%u"            "%d"           "%d"           "%d"          "%f"    "%f"    ))

