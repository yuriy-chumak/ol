#!/usr/bin/env -S bash -c "make -s -C .. regression-tests"

# tests without test results in %.%.ok file are legal,
#   but can not be used in batch testing!
TEST_FILES += $(patsubst %.ok,%,\
                 $(wildcard tests/*.scm)\
                 $(wildcard tests/*.bin))

.PHONY: language-tests
.PHONY: language-tests-native

language-tests-native:
	DEV_MODE=0 make language-tests

# enable as part of regression testing
regression-tests: language-tests

# ============================================================
# -- olvm binaries -------------------------------------------
olvm-binaries:

OLVM_SRCS += src/olvm.c extensions/ffi.c
OLVM_DEPS += vm # get deps from vm

OLVM_CFLAGS_DEBUG += $(OLVM_CFLAGS) $(CFLAGS_DEBUG)
OLVM_CFLAGS_RELEASE += $(OLVM_CFLAGS) $(CFLAGS_RELEASE)

# common olvm build flags
# TODO: don't forget to autosynchronize these flags with CFLAGS
# TODO: move these flags into main GNUmakefile
OLVM_CFLAGS += -std=gnu99 -Wno-int-to-pointer-cast
OLVM_CFLAGS += -fno-exceptions
OLVM_CFLAGS += -fno-unwind-tables -fno-asynchronous-unwind-tables
OLVM_CFLAGS += -DHAVE_DLOPEN=1 -DHAVE_SOCKETS=1
OLVM_CFLAGS += -DHAVE_MEMFD_CREATE=1
OLVM_CFLAGS += -D_FILE_OFFSET_BITS=64
OLVM_CFLAGS += -lm

OLVM_EXPORT += -Xlinker --export-dynamic

# i386 linux
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_X86),11)
# 32-bit debug
olvm-binaries: tmp/olvm-x86-debug

tmp/olvm-x86-debug: CC=gcc
tmp/olvm-x86-debug: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) $(OLVM_EXPORT) -m32)

# 32-bit release
olvm-binaries: tmp/olvm-x86-release

tmp/olvm-x86-release: CC=gcc
tmp/olvm-x86-release: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) $(OLVM_EXPORT) -m32)

endif

# x86_64 linux
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_X86_64),11)
# 64-bit debug
olvm-binaries: tmp/olvm-x86_64-debug

tmp/olvm-x86_64-debug: CC=gcc
tmp/olvm-x86_64-debug: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) $(OLVM_EXPORT))

# 64-bit release
olvm-binaries: tmp/olvm-x86_64-release

tmp/olvm-x86_64-release: CC=gcc
tmp/olvm-x86_64-release: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

# aarch64 linux
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_AARCH64),11)
# 64-bit debug
olvm-binaries: tmp/olvm-aarch64-debug

tmp/olvm-aarch64-debug: CC=aarch64-linux-gnu-gcc
tmp/olvm-aarch64-debug: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) $(OLVM_EXPORT))

# 64-bit release
olvm-binaries: tmp/olvm-aarch64-release

tmp/olvm-aarch64-release: CC=aarch64-linux-gnu-gcc
tmp/olvm-aarch64-release: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

# MIPS linux
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_MIPS),11)
# mips debug
olvm-binaries: tmp/olvm-mips-debug

tmp/olvm-mips-debug: CC=mips-linux-gnu-gcc
tmp/olvm-mips-debug: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_DEBUG) $(OLVM_EXPORT))

# mips release
olvm-binaries: tmp/olvm-mips-release

tmp/olvm-mips-release: CC=mips-linux-gnu-gcc
tmp/olvm-mips-release: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

ifeq ($(DEV_MODE)$(HAVE_MIPS64),11)
# mips64 debug
olvm-binaries: tmp/olvm-mips64-debug

tmp/olvm-mips64-debug: CC=mips64-linux-gnuabi64-gcc
tmp/olvm-mips64-debug: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_DEBUG) $(OLVM_EXPORT))

# mips64 release
olvm-binaries: tmp/olvm-mips64-release

tmp/olvm-mips64-release: CC=mips64-linux-gnuabi64-gcc
tmp/olvm-mips64-release: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

ifeq ($(DEV_MODE)$(HAVE_MIPSEL),11)
# mipsel debug
olvm-binaries: tmp/olvm-mipsel-debug

tmp/olvm-mipsel-debug: CC=mipsel-linux-gnu-gcc
tmp/olvm-mipsel-debug: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_DEBUG) $(OLVM_EXPORT))

# mipsel release
olvm-binaries: tmp/olvm-mipsel-release

tmp/olvm-mipsel-release: CC=mipsel-linux-gnu-gcc
tmp/olvm-mipsel-release: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

ifeq ($(DEV_MODE)$(HAVE_MIPS64EL),11)
# mips64el debug
olvm-binaries: tmp/olvm-mips64el-debug

tmp/olvm-mips64el-debug: CC=mips64el-linux-gnuabi64-gcc
tmp/olvm-mips64el-debug: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_DEBUG) $(OLVM_EXPORT))

# mips64el release
olvm-binaries: tmp/olvm-mips64el-release

tmp/olvm-mips64el-release: CC=mips64el-linux-gnuabi64-gcc
tmp/olvm-mips64el-release: $(FFI_DEPS)
	$(call build-olvm,$@,$(FFI_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif

# ppc64 linux
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_PPC64),11)
# 64-bit debug
olvm-binaries: tmp/olvm-ppc64-debug

tmp/olvm-ppc64-debug: CC=powerpc64-linux-gnu-gcc
tmp/olvm-ppc64-debug: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) $(OLVM_EXPORT))

# 64-bit release
olvm-binaries: tmp/olvm-ppc64-release

tmp/olvm-ppc64-release: CC=powerpc64-linux-gnu-gcc
tmp/olvm-ppc64-release: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) $(OLVM_EXPORT))

endif


# # riscv64-unknown-elf-gcc
# tmp/olvm-riscv64-debug: CC=riscv64-unknown-elf-gcc
# tmp/olvm-riscv64-debug: src/olvm.c extensions/ffi.c
# 	$(call olvm-,$@,$(OLVM_CFLAGS) $(CFLAGS_DEBUG))


# win32
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_MINGW32),11)
# 32-bit debug
olvm-binaries: tmp/olvm-win32-debug.exe

tmp/olvm-win32-debug.exe: CC=$(MGCC32)
tmp/olvm-win32-debug.exe: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) -Iincludes/win32 -lws2_32)

# 32-bit release.exe
olvm-binaries: tmp/olvm-win32-release.exe

tmp/olvm-win32-release.exe: CC=$(MGCC32)
tmp/olvm-win32-release.exe: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) -Iincludes/win32 -lws2_32)

endif

# win64
# ----------------------------
ifeq ($(DEV_MODE)$(HAVE_MINGW64),11)
# 64-bit debug
olvm-binaries: tmp/olvm-win64-debug.exe

tmp/olvm-win64-debug.exe: CC=$(MGCC64)
tmp/olvm-win64-debug.exe: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_DEBUG) -Iincludes/win32 -lws2_32)

# 64-bit release
olvm-binaries: tmp/olvm-win64-release.exe

tmp/olvm-win64-release.exe: CC=$(MGCC32)
tmp/olvm-win64-release.exe: $(OLVM_DEPS)
	$(call build-olvm,$@,$(OLVM_CFLAGS_RELEASE) -Iincludes/win32 -lws2_32)

endif

# native binaries
ifeq ($(DEV_MODE),0)

# native debug
# ----------------------------
olvm-binaries: tmp/olvm-native-debug

tmp/olvm-native-debug: $(OLVM_DEPS)
	$(call build-olvm,$@,$(CFLAGS) $(CFLAGS_DEBUG) $(L))

# native release
olvm-binaries: tmp/olvm-native-release

tmp/olvm-native-release: $(OLVM_DEPS)
	$(call build-olvm,$@,$(CFLAGS) $(CFLAGS_RELEASE) $(L))

endif

# ------ language tests ---------------------------------------
.SILENT: language-tests
language-tests: olvm-binaries
language-tests: RUNNER=LANGUAGE
language-tests: $(wildcard tests/*.scm) $(wildcard tests/*.bin)
	echo " "
	echo "# $(RUNNER) TESTS"
	FAILMARK=$(shell mktemp -u tmp/do.$(RUNNER).XXXXXXXXX) \
	BACKEND_URL=$(BACKEND_URL) RUNNER=$(RUNNER) SESSION=$(SESSION) \
	TESTS="$^" EXECUTABLE=olvm $(MAKE) tests
